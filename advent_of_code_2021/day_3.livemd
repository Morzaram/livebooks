# Day 3

## Part 1

```elixir
import Bitwise
Mix.install([:kino])
```

```elixir
input = Kino.Input.textarea("stuff")
```

```elixir
digits =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(&(&1 |> String.to_charlist() |> List.to_tuple()))
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
total = length(digits)
half = div(total, 2)

[sample | _] = digits
number_length = tuple_size(sample)

number_as_list =
  for pos <- 0..(number_length - 1) do
    zero_count = Enum.count_until(digits, &(elem(&1, pos) == ?0), half + 1)
    if zero_count > half, do: ?0, else: ?1
  end

gamma = List.to_integer(number_as_list, 2)

mask = 2 ** number_length - 1
epsilon = bnot(gamma) &&& mask
gamma * epsilon
```

## Part 2

```elixir
defmodule Recursion do
  defp recur([number], _pos, _fun) do
    number
    |> Tuple.to_list()
    |> List.to_integer(2)
  end

  defp recur(numbers, pos, fun) do
    zero_count = Enum.count(numbers, &(elem(&1, pos) == ?0))
    one_count = length(numbers) - zero_count
    to_keep = fun.(zero_count, one_count)
    numbers = Enum.filter(numbers, &(elem(&1, pos) == to_keep))
    recur(numbers, pos + 1, fun)
  end

  def o2(numbers) do
    recur(numbers, 0, fn zero_count, one_count ->
      if one_count >= zero_count, do: ?1, else: ?0
    end)
  end

  def co2(numbers) do
    recur(numbers, 0, fn zero_count, one_count ->
      if zero_count <= one_count, do: ?0, else: ?1
    end)
  end
end

numbers =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(&(&1 |> String.to_charlist() |> List.to_tuple()))

Recursion.o2(numbers) * Recursion.co2(numbers)
```
